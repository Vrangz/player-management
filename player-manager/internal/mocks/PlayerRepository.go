// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	context "context"
	model "player-manager/internal/model"

	mock "github.com/stretchr/testify/mock"
)

// PlayerRepository is an autogenerated mock type for the PlayerRepository type
type PlayerRepository struct {
	mock.Mock
}

// AddItem provides a mock function with given fields: ctx, username, item, quantity
func (_m *PlayerRepository) AddItem(ctx context.Context, username string, item string, quantity int) error {
	ret := _m.Called(ctx, username, item, quantity)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, int) error); ok {
		r0 = rf(ctx, username, item, quantity)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Build provides a mock function with given fields: ctx, username
func (_m *PlayerRepository) Build(ctx context.Context, username string) error {
	ret := _m.Called(ctx, username)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, username)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteItem provides a mock function with given fields: ctx, username, item, quantity
func (_m *PlayerRepository) DeleteItem(ctx context.Context, username string, item string, quantity int) error {
	ret := _m.Called(ctx, username, item, quantity)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, int) error); ok {
		r0 = rf(ctx, username, item, quantity)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetPlayer provides a mock function with given fields: ctx, username
func (_m *PlayerRepository) GetPlayer(ctx context.Context, username string) (model.Player, error) {
	ret := _m.Called(ctx, username)

	var r0 model.Player
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (model.Player, error)); ok {
		return rf(ctx, username)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) model.Player); ok {
		r0 = rf(ctx, username)
	} else {
		r0 = ret.Get(0).(model.Player)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListItems provides a mock function with given fields: ctx, username
func (_m *PlayerRepository) ListItems(ctx context.Context, username string) (model.Items, error) {
	ret := _m.Called(ctx, username)

	var r0 model.Items
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (model.Items, error)); ok {
		return rf(ctx, username)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) model.Items); ok {
		r0 = rf(ctx, username)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(model.Items)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewPlayerRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewPlayerRepository creates a new instance of PlayerRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewPlayerRepository(t mockConstructorTestingTNewPlayerRepository) *PlayerRepository {
	mock := &PlayerRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
