package xo

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"time"
)

// Log represents a row from 'public.logs'.
type Log struct {
	ID        int       `json:"id"`         // id
	CreatedAt time.Time `json:"created_at"` // created_at
	Msg       []byte    `json:"msg"`        // msg
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the Log exists in the database.
func (l *Log) Exists() bool {
	return l._exists
}

// Deleted returns true when the Log has been marked for deletion from
// the database.
func (l *Log) Deleted() bool {
	return l._deleted
}

// Insert inserts the Log to the database.
func (l *Log) Insert(ctx context.Context, db DB) error {
	switch {
	case l._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case l._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (primary key generated and returned by database)
	const sqlstr = `INSERT INTO public.logs (` +
		`created_at, msg` +
		`) VALUES (` +
		`$1, $2` +
		`) RETURNING id`
	// run
	logf(sqlstr, l.CreatedAt, l.Msg)
	if err := db.QueryRowContext(ctx, sqlstr, l.CreatedAt, l.Msg).Scan(&l.ID); err != nil {
		return logerror(err)
	}
	// set exists
	l._exists = true
	return nil
}

// Update updates a Log in the database.
func (l *Log) Update(ctx context.Context, db DB) error {
	switch {
	case !l._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case l._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with composite primary key
	const sqlstr = `UPDATE public.logs SET ` +
		`created_at = $1, msg = $2 ` +
		`WHERE id = $3`
	// run
	logf(sqlstr, l.CreatedAt, l.Msg, l.ID)
	if _, err := db.ExecContext(ctx, sqlstr, l.CreatedAt, l.Msg, l.ID); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the Log to the database.
func (l *Log) Save(ctx context.Context, db DB) error {
	if l.Exists() {
		return l.Update(ctx, db)
	}
	return l.Insert(ctx, db)
}

// Upsert performs an upsert for Log.
func (l *Log) Upsert(ctx context.Context, db DB) error {
	switch {
	case l._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO public.logs (` +
		`id, created_at, msg` +
		`) VALUES (` +
		`$1, $2, $3` +
		`)` +
		` ON CONFLICT (id) DO ` +
		`UPDATE SET ` +
		`created_at = EXCLUDED.created_at, msg = EXCLUDED.msg `
	// run
	logf(sqlstr, l.ID, l.CreatedAt, l.Msg)
	if _, err := db.ExecContext(ctx, sqlstr, l.ID, l.CreatedAt, l.Msg); err != nil {
		return logerror(err)
	}
	// set exists
	l._exists = true
	return nil
}

// Delete deletes the Log from the database.
func (l *Log) Delete(ctx context.Context, db DB) error {
	switch {
	case !l._exists: // doesn't exist
		return nil
	case l._deleted: // deleted
		return nil
	}
	// delete with single primary key
	const sqlstr = `DELETE FROM public.logs ` +
		`WHERE id = $1`
	// run
	logf(sqlstr, l.ID)
	if _, err := db.ExecContext(ctx, sqlstr, l.ID); err != nil {
		return logerror(err)
	}
	// set deleted
	l._deleted = true
	return nil
}

// LogByID retrieves a row from 'public.logs' as a Log.
//
// Generated from index 'logs_pkey'.
func LogByID(ctx context.Context, db DB, id int) (*Log, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, created_at, msg ` +
		`FROM public.logs ` +
		`WHERE id = $1`
	// run
	logf(sqlstr, id)
	l := Log{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, id).Scan(&l.ID, &l.CreatedAt, &l.Msg); err != nil {
		return nil, logerror(err)
	}
	return &l, nil
}
