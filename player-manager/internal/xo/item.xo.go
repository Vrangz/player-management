package xo

// Code generated by xo. DO NOT EDIT.

import (
	"context"
)

// Item represents a row from 'public.items'.
type Item struct {
	ID       int    `json:"id"`        // id
	PlayerID int    `json:"player_id"` // player_id
	Name     string `json:"name"`      // name
	Quantity int    `json:"quantity"`  // quantity
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the Item exists in the database.
func (i *Item) Exists() bool {
	return i._exists
}

// Deleted returns true when the Item has been marked for deletion from
// the database.
func (i *Item) Deleted() bool {
	return i._deleted
}

// Insert inserts the Item to the database.
func (i *Item) Insert(ctx context.Context, db DB) error {
	switch {
	case i._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case i._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (primary key generated and returned by database)
	const sqlstr = `INSERT INTO public.items (` +
		`player_id, name, quantity` +
		`) VALUES (` +
		`$1, $2, $3` +
		`) RETURNING id`
	// run
	logf(sqlstr, i.PlayerID, i.Name, i.Quantity)
	if err := db.QueryRowContext(ctx, sqlstr, i.PlayerID, i.Name, i.Quantity).Scan(&i.ID); err != nil {
		return logerror(err)
	}
	// set exists
	i._exists = true
	return nil
}

// Update updates a Item in the database.
func (i *Item) Update(ctx context.Context, db DB) error {
	switch {
	case !i._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case i._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with composite primary key
	const sqlstr = `UPDATE public.items SET ` +
		`player_id = $1, name = $2, quantity = $3 ` +
		`WHERE id = $4`
	// run
	logf(sqlstr, i.PlayerID, i.Name, i.Quantity, i.ID)
	if _, err := db.ExecContext(ctx, sqlstr, i.PlayerID, i.Name, i.Quantity, i.ID); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the Item to the database.
func (i *Item) Save(ctx context.Context, db DB) error {
	if i.Exists() {
		return i.Update(ctx, db)
	}
	return i.Insert(ctx, db)
}

// Upsert performs an upsert for Item.
func (i *Item) Upsert(ctx context.Context, db DB) error {
	switch {
	case i._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO public.items (` +
		`id, player_id, name, quantity` +
		`) VALUES (` +
		`$1, $2, $3, $4` +
		`)` +
		` ON CONFLICT (id) DO ` +
		`UPDATE SET ` +
		`player_id = EXCLUDED.player_id, name = EXCLUDED.name, quantity = EXCLUDED.quantity `
	// run
	logf(sqlstr, i.ID, i.PlayerID, i.Name, i.Quantity)
	if _, err := db.ExecContext(ctx, sqlstr, i.ID, i.PlayerID, i.Name, i.Quantity); err != nil {
		return logerror(err)
	}
	// set exists
	i._exists = true
	return nil
}

// Delete deletes the Item from the database.
func (i *Item) Delete(ctx context.Context, db DB) error {
	switch {
	case !i._exists: // doesn't exist
		return nil
	case i._deleted: // deleted
		return nil
	}
	// delete with single primary key
	const sqlstr = `DELETE FROM public.items ` +
		`WHERE id = $1`
	// run
	logf(sqlstr, i.ID)
	if _, err := db.ExecContext(ctx, sqlstr, i.ID); err != nil {
		return logerror(err)
	}
	// set deleted
	i._deleted = true
	return nil
}

// ItemByID retrieves a row from 'public.items' as a Item.
//
// Generated from index 'items_pkey'.
func ItemByID(ctx context.Context, db DB, id int) (*Item, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, player_id, name, quantity ` +
		`FROM public.items ` +
		`WHERE id = $1`
	// run
	logf(sqlstr, id)
	i := Item{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, id).Scan(&i.ID, &i.PlayerID, &i.Name, &i.Quantity); err != nil {
		return nil, logerror(err)
	}
	return &i, nil
}

// ItemsByName retrieves a row from 'public.items' as a Item.
//
// Generated from index 'name_idx'.
func ItemsByName(ctx context.Context, db DB, name string) ([]*Item, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, player_id, name, quantity ` +
		`FROM public.items ` +
		`WHERE name = $1`
	// run
	logf(sqlstr, name)
	rows, err := db.QueryContext(ctx, sqlstr, name)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*Item
	for rows.Next() {
		i := Item{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&i.ID, &i.PlayerID, &i.Name, &i.Quantity); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// ItemsByPlayerID retrieves a row from 'public.items' as a Item.
//
// Generated from index 'player_id_idx'.
func ItemsByPlayerID(ctx context.Context, db DB, playerID int) ([]*Item, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, player_id, name, quantity ` +
		`FROM public.items ` +
		`WHERE player_id = $1`
	// run
	logf(sqlstr, playerID)
	rows, err := db.QueryContext(ctx, sqlstr, playerID)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*Item
	for rows.Next() {
		i := Item{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&i.ID, &i.PlayerID, &i.Name, &i.Quantity); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// ItemByPlayerIDName retrieves a row from 'public.items' as a Item.
//
// Generated from index 'uq_player_item'.
func ItemByPlayerIDName(ctx context.Context, db DB, playerID int, name string) (*Item, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, player_id, name, quantity ` +
		`FROM public.items ` +
		`WHERE player_id = $1 AND name = $2`
	// run
	logf(sqlstr, playerID, name)
	i := Item{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, playerID, name).Scan(&i.ID, &i.PlayerID, &i.Name, &i.Quantity); err != nil {
		return nil, logerror(err)
	}
	return &i, nil
}

// Player returns the Player associated with the Item's (PlayerID).
//
// Generated from foreign key 'fk_players_items'.
func (i *Item) Player(ctx context.Context, db DB) (*Player, error) {
	return PlayerByID(ctx, db, i.PlayerID)
}
