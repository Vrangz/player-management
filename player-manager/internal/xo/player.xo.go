package xo

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"time"
)

// Player represents a row from 'public.players'.
type Player struct {
	ID        int       `json:"id"`         // id
	Username  string    `json:"username"`   // username
	CreatedAt time.Time `json:"created_at"` // created_at
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the Player exists in the database.
func (p *Player) Exists() bool {
	return p._exists
}

// Deleted returns true when the Player has been marked for deletion from
// the database.
func (p *Player) Deleted() bool {
	return p._deleted
}

// Insert inserts the Player to the database.
func (p *Player) Insert(ctx context.Context, db DB) error {
	switch {
	case p._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case p._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (primary key generated and returned by database)
	const sqlstr = `INSERT INTO public.players (` +
		`username, created_at` +
		`) VALUES (` +
		`$1, $2` +
		`) RETURNING id`
	// run
	logf(sqlstr, p.Username, p.CreatedAt)
	if err := db.QueryRowContext(ctx, sqlstr, p.Username, p.CreatedAt).Scan(&p.ID); err != nil {
		return logerror(err)
	}
	// set exists
	p._exists = true
	return nil
}

// Update updates a Player in the database.
func (p *Player) Update(ctx context.Context, db DB) error {
	switch {
	case !p._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case p._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with composite primary key
	const sqlstr = `UPDATE public.players SET ` +
		`username = $1, created_at = $2 ` +
		`WHERE id = $3`
	// run
	logf(sqlstr, p.Username, p.CreatedAt, p.ID)
	if _, err := db.ExecContext(ctx, sqlstr, p.Username, p.CreatedAt, p.ID); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the Player to the database.
func (p *Player) Save(ctx context.Context, db DB) error {
	if p.Exists() {
		return p.Update(ctx, db)
	}
	return p.Insert(ctx, db)
}

// Upsert performs an upsert for Player.
func (p *Player) Upsert(ctx context.Context, db DB) error {
	switch {
	case p._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO public.players (` +
		`id, username, created_at` +
		`) VALUES (` +
		`$1, $2, $3` +
		`)` +
		` ON CONFLICT (id) DO ` +
		`UPDATE SET ` +
		`username = EXCLUDED.username, created_at = EXCLUDED.created_at `
	// run
	logf(sqlstr, p.ID, p.Username, p.CreatedAt)
	if _, err := db.ExecContext(ctx, sqlstr, p.ID, p.Username, p.CreatedAt); err != nil {
		return logerror(err)
	}
	// set exists
	p._exists = true
	return nil
}

// Delete deletes the Player from the database.
func (p *Player) Delete(ctx context.Context, db DB) error {
	switch {
	case !p._exists: // doesn't exist
		return nil
	case p._deleted: // deleted
		return nil
	}
	// delete with single primary key
	const sqlstr = `DELETE FROM public.players ` +
		`WHERE id = $1`
	// run
	logf(sqlstr, p.ID)
	if _, err := db.ExecContext(ctx, sqlstr, p.ID); err != nil {
		return logerror(err)
	}
	// set deleted
	p._deleted = true
	return nil
}

// PlayerByID retrieves a row from 'public.players' as a Player.
//
// Generated from index 'players_pkey'.
func PlayerByID(ctx context.Context, db DB, id int) (*Player, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, username, created_at ` +
		`FROM public.players ` +
		`WHERE id = $1`
	// run
	logf(sqlstr, id)
	p := Player{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, id).Scan(&p.ID, &p.Username, &p.CreatedAt); err != nil {
		return nil, logerror(err)
	}
	return &p, nil
}

// PlayerByUsername retrieves a row from 'public.players' as a Player.
//
// Generated from index 'players_username_key'.
func PlayerByUsername(ctx context.Context, db DB, username string) (*Player, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, username, created_at ` +
		`FROM public.players ` +
		`WHERE username = $1`
	// run
	logf(sqlstr, username)
	p := Player{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, username).Scan(&p.ID, &p.Username, &p.CreatedAt); err != nil {
		return nil, logerror(err)
	}
	return &p, nil
}
